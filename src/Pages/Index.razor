@page "/"
@using System.Text.Json
@using System.Diagnostics
@inject IJSRuntime JSRuntime;

<h1>Hello, Office!</h1>

@if (!_hostInformation.IsInitialized)
{
    <p>Not in Office.</p>
    return;
}

<table class="table">
    <tbody>
    <tr>
        <td>Host</td>
        <td>@_hostInformation.Host</td>
    </tr>
    <tr>
        <td>Platform</td>
        <td>@_hostInformation.Platform</td>
    </tr>
    </tbody>
</table>

<hr/>

<EditForm Model="@_documentMetadata" OnValidSubmit="SaveDocumentMetadata">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="form-group">
        <label>
            Title:
            <InputText id="title" class="form-control" @bind-Value="@_documentMetadata.Title"/>
        </label>
    </div>

    <div class="form-group">
        <label>
            Subject:
            <InputText id="subject" class="form-control" @bind-Value="@_documentMetadata.Subject"/>
        </label>
    </div>

    <button type="submit" class="btn btn-primary">Save Metadata</button>
</EditForm>

<hr/>

<EditForm Model="@_documentSettings" OnValidSubmit="SaveDocumentSettings">
    <div class="form-check">
        <label>
            <InputCheckbox id="autoShowAddIn" class="form-check-input" @bind-Value="@_documentSettings.AutoShowAddIn"/>
            Auto show add in
        </label>
    </div>
    
    <button type="submit" class="btn btn-primary">Save Settings</button>
</EditForm>

@code
{
    private HostInformation _hostInformation = new HostInformation();
    private DocumentMetadata _documentMetadata = new DocumentMetadata();
    private DocumentSettings _documentSettings = new DocumentSettings();

    private async Task SaveDocumentMetadata()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("wordWrapper.saveDocumentMetadata", _documentMetadata);
        }
        catch (JSException ex)
        {
            HandleOfficeError(ex);
        }
    }

    private async Task SaveDocumentSettings()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("Office.context.document.settings.set", "Office.AutoShowTaskpaneWithDocument", _documentSettings.AutoShowAddIn);
            await JSRuntime.InvokeVoidAsync("Office.context.document.settings.saveAsync");
        }
        catch (JSException ex)
        {
            HandleOfficeError(ex);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Debug.Print("OnAfterRenderAsync. First render: " + firstRender);

        if (firstRender)
        {
            try
            {
                _hostInformation = await JSRuntime.InvokeAsync<HostInformation>("Office.onReady");
                if (_hostInformation.IsInitialized)
                {
                    _documentMetadata = await JSRuntime.InvokeAsync<DocumentMetadata>("wordWrapper.getDocumentMetadata");

                    var autoShowAddIn = await JSRuntime.InvokeAsync<bool?>("window.Office.context.document.settings.get", "Office.AutoShowTaskpaneWithDocument");
                    _documentSettings.AutoShowAddIn = autoShowAddIn.HasValue && autoShowAddIn.Value;

                    StateHasChanged();
                }
            }
            catch (JSException ex)
            {
                HandleOfficeError(ex);
            }
        }
    }

    private void HandleOfficeError(JSException ex)
    {
        OfficeError officeError = null;
        try
        {
            officeError = JsonSerializer.Deserialize<OfficeError>(ex.Message);
        }
        catch
        {
            // not an office error object
            Debug.Print(ex.Message);
        }

        if (officeError != null)
        {
            Debug.Print(officeError.Name);
        }
    }
}